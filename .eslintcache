[{"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\index.js":"1","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\App.js":"2","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\reportWebVitals.js":"3","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\MainPage\\MainPage.jsx":"4","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\LoginPage\\LoginPage.jsx":"5","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\RegisterPage\\RegisterPage.jsx":"6","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\ForgotPasswordPage\\ForgotPasswordPage.jsx":"7","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\LoginRegisterNav\\LoginRegisterNav.Component.jsx":"8","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\HomePage\\HomePage.jsx":"9","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\HomePageNav\\HomePageNav.Component.jsx":"10","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\AddQuestion\\AddQuestion.component.jsx":"11","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\Switch\\Switch.Component.jsx":"12","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\NewPasswordPage\\NewPasswordPage.jsx":"13","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\VerifyEmail\\VerifyEmail.jsx":"14","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\AnswerModel\\AnswerModel.component.jsx":"15","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\ProfilePage\\ProfilePage.jsx":"16","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\QuestionsPage\\QuestionsPage.jsx":"17","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\QuestionModel\\QuestionModel.Component.jsx":"18","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\NoDataCard\\NoDataCard.component.jsx":"19","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\AddAnswerPage\\AddAnswerPage.jsx":"20","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\AddAnswerModel\\AddAnswerModel.component.jsx":"21","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\UserPage\\UserPage.jsx":"22","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\ProfileBoxHeader\\ProfileBoxHeader.component.jsx":"23","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\helpers\\tokensRefresher.js":"24","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\LogoutButton\\LogoutButton.jsx":"25","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\LogoutPopup\\LogoutPopup.Component.jsx":"26","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Zustand\\AuthZustand.js":"27","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\SettingsPage\\SettingsPage.jsx":"28","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\FriendsPage\\FriendsPage.jsx":"29","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\FollowedUserCard\\FollowedUserCard.Component.jsx":"30","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\GetAnswerPage\\GetAnswerPage.jsx":"31","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\WebSockets\\WebsocketConnection.js":"32","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\NotificationPage\\NotificationPage.jsx":"33","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\NotificationCard\\NotificationCard.Component.jsx":"34"},{"size":499,"mtime":1611043478664,"results":"35","hashOfConfig":"36"},{"size":4142,"mtime":1612943808203,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"36"},{"size":3236,"mtime":1610252220066,"results":"39","hashOfConfig":"36"},{"size":3565,"mtime":1611043573673,"results":"40","hashOfConfig":"36"},{"size":3656,"mtime":1610252408721,"results":"41","hashOfConfig":"36"},{"size":1814,"mtime":1610252038257,"results":"42","hashOfConfig":"36"},{"size":385,"mtime":1609452009726,"results":"43","hashOfConfig":"36"},{"size":737,"mtime":1610656043106,"results":"44","hashOfConfig":"36"},{"size":2285,"mtime":1611199502722,"results":"45","hashOfConfig":"36"},{"size":925,"mtime":1609737199631,"results":"46","hashOfConfig":"36"},{"size":599,"mtime":1609737417901,"results":"47","hashOfConfig":"36"},{"size":2438,"mtime":1610252274447,"results":"48","hashOfConfig":"36"},{"size":1124,"mtime":1610252452853,"results":"49","hashOfConfig":"36"},{"size":3805,"mtime":1612952656773,"results":"50","hashOfConfig":"36"},{"size":5625,"mtime":1612927939547,"results":"51","hashOfConfig":"36"},{"size":3057,"mtime":1611198921712,"results":"52","hashOfConfig":"36"},{"size":818,"mtime":1612952169326,"results":"53","hashOfConfig":"36"},{"size":218,"mtime":1610062113325,"results":"54","hashOfConfig":"36"},{"size":3070,"mtime":1611198850872,"results":"55","hashOfConfig":"36"},{"size":1949,"mtime":1611051158274,"results":"56","hashOfConfig":"36"},{"size":5237,"mtime":1612927151911,"results":"57","hashOfConfig":"36"},{"size":2818,"mtime":1612094597746,"results":"58","hashOfConfig":"36"},{"size":286,"mtime":1611198480412,"results":"59","hashOfConfig":"36"},{"size":493,"mtime":1610650059700,"results":"60","hashOfConfig":"36"},{"size":874,"mtime":1611043315088,"results":"61","hashOfConfig":"36"},{"size":196,"mtime":1611043100727,"results":"62","hashOfConfig":"36"},{"size":6643,"mtime":1611301061330,"results":"63","hashOfConfig":"36"},{"size":1730,"mtime":1612662536462,"results":"64","hashOfConfig":"36"},{"size":529,"mtime":1612263034450,"results":"65","hashOfConfig":"36"},{"size":1963,"mtime":1612928420672,"results":"66","hashOfConfig":"36"},{"size":442,"mtime":1612949969877,"results":"67","hashOfConfig":"36"},{"size":2473,"mtime":1612983859542,"results":"68","hashOfConfig":"36"},{"size":1476,"mtime":1612983805499,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1d055l1",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"72"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"72"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\index.js",[],["151","152"],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\App.js",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\reportWebVitals.js",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\MainPage\\MainPage.jsx",["153","154","155","156","157","158","159","160","161"],"import React from \"react\";\r\nimport logo from \"../../Assets/ask-logo.png\";\r\nimport AppStore from \"../../Assets/app-store.png\";\r\nimport GooglePlay from \"../../Assets/google-play.png\";\r\nimport AppGallery from \"../../Assets/app-gallery.png\";\r\nimport { ReactComponent as AskLogo } from \"../../Assets/social-icons/askfm.svg\";\r\nimport { ReactComponent as FacebookLogo } from \"../../Assets/social-icons/facebook.svg\";\r\nimport { ReactComponent as GithubLogo } from \"../../Assets/social-icons/github.svg\";\r\nimport { ReactComponent as InstagramLogo } from \"../../Assets/social-icons/instagram.svg\";\r\nimport { ReactComponent as TwitterLogo } from \"../../Assets/social-icons/twitter.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./main-page.style.css\";\r\nconst MainPage = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"application\">\r\n        <Helmet>\r\n          <meta charSet=\"utf-8\" />\r\n          <title>Home Page</title>\r\n        </Helmet>\r\n      </div>\r\n      <div className=\"main-page\">\r\n        <div className=\"top\">\r\n          <img src={logo} alt=\"Ask fm Logo\" className=\"ask-logo\" />\r\n          <h1>\r\n            Curious? <strong> Just ask! </strong> <br />{\" \"}\r\n            <strong>Openly or anonymously.</strong>{\" \"}\r\n          </h1>\r\n          <Link to=\"/register\">\r\n            <button className=\"register-button\">Register</button>\r\n          </Link>\r\n          <Link to=\"/login\">\r\n            <button className=\"login-button\">Login</button>\r\n          </Link>\r\n        </div>\r\n        <div className=\"stores\">\r\n          <img src={AppStore} alt=\"App Store\" className=\"store\" />\r\n          <img src={GooglePlay} alt=\"Google Play\" className=\"store\" />\r\n          <img src={AppGallery} alt=\"App Gallery\" className=\"store\" />\r\n        </div>\r\n      </div>\r\n      <footer className=\"main-page-footer\">\r\n        <h2>pictures placeholder</h2>\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">About ASKfm</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Safety center</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Help</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Community Guidelines</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Terms of use</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Privacy policy</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\"> Cookies policy</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Advertising</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">Professionals</a>\r\n          </li>\r\n        </ul>\r\n        <hr />\r\n        <div className=\"languages-socials\">\r\n          <div className=\"language\">\r\n            <span>\r\n              Language: <span>English</span>{\" \"}\r\n            </span>\r\n          </div>\r\n          <div className=\"socials\">\r\n            <AskLogo className=\"social-logo\" />\r\n            <FacebookLogo className=\"social-logo\" />\r\n            <InstagramLogo className=\"social-logo\" />\r\n            <GithubLogo className=\"social-logo\" />\r\n            <TwitterLogo className=\"social-logo\" />\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\LoginPage\\LoginPage.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\RegisterPage\\RegisterPage.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\ForgotPasswordPage\\ForgotPasswordPage.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\LoginRegisterNav\\LoginRegisterNav.Component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\HomePage\\HomePage.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\HomePageNav\\HomePageNav.Component.jsx",["162"],"import { Link } from \"react-router-dom\";\r\nimport {useState} from 'react'\r\nimport {ReactComponent as SettingsIcon} from '../../Assets/nav-icons/settings_icon.svg'\r\nimport {ReactComponent as NotificationIcon} from '../../Assets/nav-icons/notification-icon.svg'\r\nimport {ReactComponent as HomeIcon} from '../../Assets/nav-icons/home-icon.svg'\r\nimport UserIcon from '../../Assets/nav-icons/user-icon.png'\r\nimport QuestionIcon from '../../Assets/nav-icons/question-icon.png'\r\nimport  FriendsIcon from '../../Assets/nav-icons/friends-icon.png'\r\nimport AskLogo from \"../../Assets/ask-logo.png\";\r\nimport LogoutButton from '../LogoutButton/LogoutButton'\r\n\r\nimport \"./home-page-nav.stlye.css\";\r\nimport LogoutPopup from \"../LogoutPopup/LogoutPopup.Component\";\r\n\r\nconst HomePageNav = () => {\r\n  const [logoutPopup, setLogoutPopup] = useState(false)\r\n\r\n  const handleVisibility = () => {\r\n    setLogoutPopup(!logoutPopup)\r\n    \r\n  }\r\n  const handleLogout = () => {}\r\n  return (\r\n   \r\n    <>\r\n    <div className='nav-container'>\r\n    <nav>\r\n      <div className=\"home-page-nav\">\r\n        <div className='nav-icons-container'>\r\n          <div onClick={handleVisibility}>\r\n          <LogoutButton />\r\n          </div>\r\n          <Link to='/settings'><SettingsIcon className='nav-icon'  alt='settings icon' title='Settings' /></Link>\r\n          <Link to='/notifications'><NotificationIcon className='nav-icon' alt='notifications icon' title='Notification' /></Link>\r\n          <Link to='/following'><img src={FriendsIcon} alt=\"friends icon\" className='nav-icon' title='Following' /></Link>\r\n          <Link to='/profile'><img src={UserIcon} className='nav-icon' alt=\"profile icon\" title=\"Profile\" /></Link>\r\n          <Link to='/questions'><img src={QuestionIcon} className='nav-icon' alt=\"question icon\" title='Questions' /></Link>\r\n          <Link to='/home'><HomeIcon className='nav-icon' alt='home icon' title=\"Home\" /></Link>\r\n        </div>\r\n\r\n        <div>\r\n          <Link to='/home'>\r\n            <img src={AskLogo} alt=\"askfm logo\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    <div className='logout-nav'>\r\n    <LogoutPopup isVisible={logoutPopup} handleVisibility={handleVisibility} />\r\n    </div>\r\n    </div>\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePageNav;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\AddQuestion\\AddQuestion.component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\Switch\\Switch.Component.jsx",[],["163","164"],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\NewPasswordPage\\NewPasswordPage.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\VerifyEmail\\VerifyEmail.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\AnswerModel\\AnswerModel.component.jsx",["165","166","167"],"import \"./answer-model.style.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ReactComponent as Heart } from \"../../Assets/questions-icons/heart.svg\";\r\nimport tokensRefresher from \"../../helpers/tokensRefresher\";\r\nimport { ReactComponent as DeleteIcon } from \"../../Assets/questions-icons/delete-icon.svg\";\r\n\r\nconst AnswerModel = ({\r\n  question,\r\n  answeredDate,\r\n  answer,\r\n  isAnonymous,\r\n  likedBy,\r\n  numberOfLikes,\r\n  questionId,\r\n  image,\r\n  senderId,\r\n  deleteHidden,\r\n  userImage,\r\n  userName,\r\n  handleAnswerDelete,\r\n}) => {\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n  const userId = JSON.parse(localStorage.getItem(\"userId\"));\r\n  const [like, setLike] = useState(false);\r\n  const [count, setCount] = useState(numberOfLikes);\r\n\r\n  //likes visibility effect\r\n  useEffect(() => {\r\n    if (likedBy != undefined && likedBy.includes(userId)) {\r\n      setLike(true);\r\n    } else {\r\n      setLike(false);\r\n    }\r\n  }, []);\r\n\r\n  const handleLike = async () => {\r\n    //handleLike\r\n    if (!like) {\r\n      const response = await fetch(\r\n        `http://localhost:4000/questions/addlike/${questionId}`,\r\n        {\r\n          method: \"put\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      tokensRefresher(data);\r\n      if (response.status === 200) {\r\n        setLike(true);\r\n        setCount((currentCount) => currentCount + 1);\r\n      }\r\n    } else {\r\n      const response = await fetch(\r\n        `http://localhost:4000/questions/removelike/${questionId}`,\r\n        {\r\n          method: \"put\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      tokensRefresher(data);\r\n      if (response.status === 200) {\r\n        setLike(false);\r\n        setCount((currentCount) => currentCount - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  let visible;\r\n  !isAnonymous ? (visible = \"inline-block\") : (visible = \"none\");\r\n  return (\r\n    <div className=\"answer-model\">\r\n      <DeleteIcon\r\n        onClick={() => handleAnswerDelete(questionId)}\r\n        className={`delete-answer ${deleteHidden ? \"hidden\" : null}`}\r\n      />\r\n      <div className=\"question-container\">\r\n        <div className='question-text-container'>\r\n        <p className=\"question\">{question}</p>\r\n        </div>\r\n        <div className=\"author\" style={{ display: visible }}>\r\n          <span\r\n            style={{\r\n              backgroundImage: `url('http://localhost:4000/${userImage}')`,\r\n            }}\r\n            alt=\"user-image\"\r\n            className=\"answer-image\"\r\n          ></span>\r\n          <Link to={`/user/${senderId}`} className=\"profile-link\">\r\n            {userName}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <Link to={`/answer/${questionId}`} className=\"decoration-none\">\r\n        <span className=\"from-period\">\r\n          {answeredDate ? answeredDate.substring(0, 10) : null}\r\n        </span>\r\n      </Link>\r\n      <article className=\"answer\">{answer}</article>\r\n      {image ? (\r\n        <img src={`http://localhost:4000/${image}`} alt=\"answer-image\" />\r\n      ) : null}\r\n      <div className=\"answer-likes\">\r\n        <Heart\r\n          onClick={handleLike}\r\n          className={`heart-icon ${like ? \"fill-red\" : \"fill-gray\"}`}\r\n        />\r\n        <p className=\"likes-count\">{count}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerModel;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\ProfilePage\\ProfilePage.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\QuestionsPage\\QuestionsPage.jsx",["168"],"import { useEffect, useState } from \"react\";\r\nimport HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component\";\r\nimport NoDataCard from \"../../Components/NoDataCard/NoDataCard.component\";\r\nimport QuestionModel from \"../../Components/QuestionModel/QuestionModel.Component\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport tokensRefresher from '../../helpers/tokensRefresher'\r\nimport useStore from '../../Zustand/AuthZustand'\r\nimport \"./questions-page.style.css\";\r\n\r\nconst QuestionsPage = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n  const Logout = useStore(state => state.setLogout)\r\n\r\n  //handle delete function\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await fetch(`http://localhost:4000/questions/deletequestion/${id}`, {\r\n        method: \"delete\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"access-token\": `Bearer ${accessToken}`,\r\n          \"refresh-token\": refreshToken,\r\n        },\r\n      });\r\n      const newQuestions = questions.filter(\r\n        (question) => question.question_id !== id\r\n      );\r\n      setQuestions(newQuestions);\r\n    } catch (error) {\r\n      alert(\"error\");\r\n    }\r\n  };\r\n\r\n  //fetching user questions\r\n  let isMounted = true\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\r\n        \"http://localhost:4000/questions/getquestions\",\r\n        {\r\n          method: \"get\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      if(response.status === 400)return\r\n      if(response.status === 401){\r\n        localStorage.clear()\r\n        Logout()\r\n    }\r\n      if(data.payload != undefined && isMounted) {setQuestions([...data.payload]);}\r\n      tokensRefresher(data)\r\n    })();\r\n    // eslint-disable-next-line\r\n    return ()=> isMounted=false\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"application\">\r\n        <Helmet>\r\n          <meta charSet=\"utf-8\" />\r\n          <title>Questions</title>\r\n        </Helmet>\r\n      </div>\r\n      <HomePageNav />\r\n      <div className=\"questions-page-container\">\r\n        {questions.length === 0 ? <NoDataCard data={\"Questions\"} /> : null}\r\n        {questions.map((question) => {\r\n          return (\r\n            <div key={question.question_id}>\r\n              <QuestionModel\r\n                isAnonymous={question.is_anonymous}\r\n                recieverId={question.reciever_id}\r\n                question={question.question}\r\n                date={question.asked_date}\r\n                questionId={question.question_id}\r\n                handleDelete={() => handleDelete(question.question_id)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuestionsPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\QuestionModel\\QuestionModel.Component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\NoDataCard\\NoDataCard.component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\AddAnswerPage\\AddAnswerPage.jsx",["169"],"import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport AddAnswerModel from \"../../Components/AddAnswerModel/AddAnswerModel.component\";\r\nimport HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokensRefresher from \"../../helpers/tokensRefresher\";\r\nimport useStore from '../../Zustand/AuthZustand'\r\n\r\nimport \"./add-answer-page.style.css\";\r\nconst AddAnswerPage = () => {\r\n  //state\r\n  const [answer, setAnswer] = useState('');\r\n  const [questionData, setQuestionData] = useState({\r\n    question: \"\",\r\n    isAnonymous: true,\r\n  });\r\n  const [imagePath, setImagePath] = useState(null)\r\n  //getting tokens for sending request\r\n  const questionId = useParams().questionid;\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n  const Logout = useStore(state => state.setLogout)\r\n  const history = useHistory();\r\n\r\n  //fetching the question data\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\r\n        `http://localhost:4000/questions/getquestion/${questionId}`,\r\n        {\r\n          method: \"get\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n      if(response.status === 401){\r\n        localStorage.clear()\r\n        Logout()\r\n    }\r\n      const data = await response.json();\r\n\r\n      setQuestionData({\r\n        question: data.payload.question,\r\n        isAnonymous: data.payload.isAnonymous,\r\n      });\r\n      tokensRefresher(data);\r\n    })();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (answer.text === \"\") return;\r\n    const response = await fetch(\r\n      `http://localhost:4000/questions/addanswer/${questionId}`,\r\n      {\r\n        method: \"put\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"access-token\": `Bearer ${accessToken}`,\r\n          \"refresh-token\": refreshToken,\r\n        },\r\n        body: JSON.stringify({\r\n          answer: answer,\r\n          imagePath\r\n        }),\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n    tokensRefresher(data);\r\n    if (response.status === 200) {\r\n      history.push(\"/profile\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"application\">\r\n        <Helmet>\r\n          <meta charSet=\"utf-8\" />\r\n          <title>Add Answer</title>\r\n        </Helmet>\r\n      </div>\r\n      <HomePageNav />\r\n      <div className=\"add-answer-container\">\r\n        <AddAnswerModel\r\n          handleSubmit={handleSubmit}\r\n          answer={answer.text}\r\n          setAnswer={setAnswer}\r\n          question={questionData.question}\r\n          isAnonymous={questionData.isAnonymous}\r\n          setImagePath={setImagePath}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddAnswerPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\AddAnswerModel\\AddAnswerModel.component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\UserPage\\UserPage.jsx",["170","171"],"import AddQuestion from \"../../Components/AddQuestion/AddQuestion.component.jsx\";\r\nimport { useState, useEffect } from \"react\";\r\nimport AnswerModel from \"../../Components/AnswerModel/AnswerModel.component.jsx\";\r\nimport HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component.jsx\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport NoDataCard from \"../../Components/NoDataCard/NoDataCard.component\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport tokensRefresher from '../../helpers/tokensRefresher'\r\nimport ProfileBoxHeader from \"../../Components/ProfileBoxHeader/ProfileBoxHeader.component.jsx\";\r\nimport useStore from '../../Zustand/AuthZustand'\r\nimport \"../ProfilePage/profile-page.style.css\";\r\n\r\nconst UserPage = () => {\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [isAnonymous, setIsAnonymous] = useState(false);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [userData, setUserData] = useState({\r\n    userName:'',\r\n    imagePath: '',\r\n    isFollowed: true,\r\n  })\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n  const Logout = useStore(state => state.setLogout)\r\n  const profileId = useParams().id;\r\n  const history = useHistory()\r\n  if(profileId === JSON.parse(localStorage.getItem('userId'))){history.push('/profile')}\r\n\r\n  //handleSubmit for Asking a Question\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (question === \"\") return;\r\n    const response = await fetch(\r\n      `http://localhost:4000/questions/askquestion/${profileId}`,\r\n      {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"access-token\": `Bearer ${accessToken}`,\r\n          \"refresh-token\": refreshToken,\r\n        },\r\n        body: JSON.stringify({\r\n          question,\r\n          isAnonymous,\r\n        }),\r\n      }\r\n    );\r\n    const data = await response.json();\r\n    tokensRefresher(data)\r\n    setQuestion(\"\");\r\n\r\n    if (data[1] !== undefined) {\r\n      localStorage.setItem(\"user\", JSON.stringify(data[1]));\r\n    }\r\n  };\r\n\r\n  //Fetching user data\r\n  useEffect(()=>{\r\n    (async function(){\r\n      const userResponse = await fetch(`http://localhost:4000/user/getuserandimage/${profileId}`, {\r\n        method: 'get',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"access-token\": `Bearer ${accessToken}`,\r\n          \"refresh-token\": refreshToken,\r\n        }\r\n      })\r\n      const userData = (await userResponse.json()).payload[0]\r\n      if(userData.user_image != null){\r\n        var userImage = userData.user_image;\r\n      }\r\n      const userName = userData.user_name\r\n      setUserData({userName,imagePath: `http://localhost:4000/${userImage}`,isFollowed: true})\r\n    })()\r\n  }, [])\r\n\r\n\r\n  //Fetching user Answers\r\n  let isMounted = true\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\r\n        `http://localhost:4000/questions/getanswers/${profileId}`,\r\n        {\r\n          method: \"get\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      setAnswers(data.payload)\r\n      tokensRefresher(data)\r\n      if (response.status === 400) return;\r\n      if(response.status === 401){\r\n        localStorage.clear()\r\n        Logout()\r\n    }\r\n        if(isMounted){setAnswers(data.payload);}\r\n    })();\r\n    //preventing memory leak\r\n    return()=> {isMounted = false}\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>{userData.userName} profile</title>\r\n      </Helmet>\r\n      <HomePageNav />\r\n      <div className=\"profile-page-container\">\r\n        <ProfileBoxHeader\r\n        profilename = {userData.userName}\r\n        image = {userData.imagePath}\r\n        isFollowed = {userData.isFollowed}\r\n        />\r\n        <AddQuestion\r\n          question={question}\r\n          setQuestion={setQuestion}\r\n          handleSubmit={handleSubmit}\r\n          isAnonymous={isAnonymous}\r\n          setIsAnonymous={setIsAnonymous}\r\n        />\r\n        {answers.length !== 0 ? (\r\n          answers.map((answer) => {\r\n            return (\r\n              <div key={answer.question_id}>\r\n                <AnswerModel\r\n                question={answer.question}\r\n                answeredDate={answer.answered_date}\r\n                answer={answer.answer}\r\n                isAnonymous={answer.is_anonymous}\r\n                likedBy={answer.liked_by}\r\n                numberOfLikes={answer.liked_by? answer.liked_by.length : 0}\r\n                questionId={answer.question_id}\r\n                image={answer.answer_image}\r\n                senderId = {answer.sender_id}\r\n                userName={answer.user_name}\r\n                userImage={answer.user_image}\r\n                deleteHidden={true}\r\n                />\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <NoDataCard data={\"answers\"} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\ProfileBoxHeader\\ProfileBoxHeader.component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\helpers\\tokensRefresher.js",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\LogoutButton\\LogoutButton.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\LogoutPopup\\LogoutPopup.Component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Zustand\\AuthZustand.js",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\SettingsPage\\SettingsPage.jsx",["172","173"],"import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component\";\r\nimport tokensRefresher from \"../../helpers/tokensRefresher\";\r\nimport useStore from \"../../Zustand/AuthZustand\";\r\nimport \"./settings-page.style.css\";\r\n\r\nconst SettingsPage = () => {\r\n  const [settings, setSettings] = useState({\r\n    name: \"\",\r\n    location: \"\",\r\n    email: \"\",\r\n    bio: \"\",\r\n    birthday: \"\",\r\n    gender: \"\",\r\n    imagePath: null,\r\n  });\r\n  console.log(settings);\r\n  const { name, location, email, bio, birthday, gender, imagePath } = settings;\r\n  const history = useHistory();\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n  const Logout = useStore((state) => state.setLogout);\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\"http://localhost:4000/user/getsettings\", {\r\n        method: \"get\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"access-token\": `Bearer ${accessToken}`,\r\n          \"refresh-token\": refreshToken,\r\n        },\r\n      });\r\n      const data = await response.json();\r\n      if (response.status === 401) {\r\n        localStorage.clear();\r\n        Logout();\r\n      }\r\n      if (response.status === 200) {\r\n        tokensRefresher(data);\r\n\r\n\r\n          setSettings({\r\n            name: data.payload.user_name,\r\n            location: data.payload.user_location,\r\n            email: data.payload.user_email,\r\n            bio: data.payload.user_bio,\r\n            birthday: data.payload.user_birthday,\r\n            gender: data.payload.user_gender,\r\n            imagePath: data.payload.user_image,\r\n          });\r\n\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const response = await fetch(\"http://localhost:4000/user/settings\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"access-token\": `Bearer ${accessToken}`,\r\n        \"refresh-token\": refreshToken,\r\n      },\r\n      body: JSON.stringify({\r\n        name,\r\n        location,\r\n        email,\r\n        bio,\r\n        birthday,\r\n        gender,\r\n        imagePath,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.status === 200) {\r\n      tokensRefresher(data);\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", e.target.files[0]);\r\n    const response = await fetch(\"http://localhost:4000/upload/image\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"access-token\": `Bearer ${accessToken}`,\r\n        \"refresh-token\": refreshToken,\r\n      },\r\n      body: formData,\r\n    });\r\n    const data = await response.json();\r\n    setSettings({ ...settings, imagePath: data.payload });\r\n  };\r\n\r\n  const today = new Date().toISOString().substring(0, 10);\r\n  const minDate = new Date().getFullYear() - 100;\r\n  return (\r\n    <>\r\n      <HomePageNav />\r\n      <div className=\"settings-page-container\">\r\n        <form className=\"settings-form\" onSubmit={handleSubmit}>\r\n          <label htmlFor=\"name\" className=\"settings-form-label\">\r\n            Full name\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            id=\"name\"\r\n            required\r\n            value={settings.name}\r\n            onChange={(e) => setSettings({ ...settings, name: e.target.value })}\r\n          />\r\n\r\n          <label htmlFor=\"location\" className=\"settings-form-label\">\r\n            Location\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Location\"\r\n            id=\"location\"\r\n            value={settings.location}\r\n            onChange={(e) =>\r\n              setSettings({ ...settings, location: e.target.value })\r\n            }\r\n          />\r\n\r\n          <label htmlFor=\"bio\" className=\"settings-form-label\">\r\n            About me\r\n          </label>\r\n          <textarea\r\n            id=\"bio\"\r\n            value={settings.bio}\r\n            onChange={(e) => setSettings({ ...settings, bio: e.target.value })}\r\n            placeholder=\"Biography\"\r\n          />\r\n\r\n          <label htmlFor=\"email\" className=\"settings-form-label\">\r\n            Change your email\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            required\r\n            id=\"email\"\r\n            value={settings.email}\r\n            onChange={(e) =>\r\n              setSettings({ ...settings, email: e.target.value })\r\n            }\r\n          />\r\n\r\n          <label htmlFor=\"date\" className=\"settings-form-label\">\r\n            Birthday\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"date\"\r\n            min={`${minDate}-01-01`}\r\n            max={today}\r\n            onChange={(e) =>\r\n              setSettings({ ...settings, birthday: e.target.value })\r\n            }\r\n            value={settings.birthday}\r\n          />\r\n          <label htmlFor=\"gender\" className=\"settings-form-label\">\r\n            Gender\r\n          </label>\r\n\r\n          <select\r\n            id=\"gender\"\r\n            value={settings.gender}\r\n            onChange={(e) =>\r\n              setSettings({ ...settings, gender: e.target.value })\r\n            }\r\n          >\r\n            <option>Male</option>\r\n            <option>Female</option>\r\n            <option>Better not Specify</option>\r\n          </select>\r\n\r\n          <div className=\"image-buttons-container\">\r\n            <label\r\n              htmlFor=\"profile-image-input\"\r\n              className=\"settings-image-input\"\r\n            >\r\n              Change profile image\r\n            </label>\r\n            {settings.imagePath ? (\r\n              <button\r\n                className=\"discard-button\"\r\n                onClick={() => setSettings({ ...settings, imagePath: null })}\r\n              >\r\n                Discard\r\n              </button>\r\n            ) : null}\r\n            <input\r\n              id=\"profile-image-input\"\r\n              type=\"file\"\r\n              onChange={handleImageUpload}\r\n            />\r\n          </div>\r\n          {settings.imagePath ? (\r\n            <img\r\n              src={`http://localhost:4000/${settings.imagePath}`}\r\n              alt=\"profile picture\"\r\n              className=\"settings-profile-image\"\r\n            />\r\n          ) : null}\r\n\r\n          <button type=\"submit\" className=\"settings-button\">\r\n            Save Changes\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\FriendsPage\\FriendsPage.jsx",["174"],"import { useState, useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport FollowedUserCard from \"../../Components/FollowedUserCard/FollowedUserCard.Component\";\r\nimport HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component\";\r\nimport NoDataCard from \"../../Components/NoDataCard/NoDataCard.component\";\r\nimport \"./friends-page.style.css\";\r\n\r\nconst FriendsPage = () => {\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n  const [userData, setUserData] = useState({\r\n    username: \"\",\r\n    imagePath: \"\",\r\n    userId: \"\",\r\n  });\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\"http://localhost:4000/getfollowing\", {\r\n        method: \"get\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"access-token\": `Bearer ${accessToken}`,\r\n          \"refresh-token\": refreshToken,\r\n        },\r\n      });\r\n      const data = (await response.json()).payload;\r\n      console.log(data);\r\n      setUserData(data)\r\n    })();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Following</title>\r\n      </Helmet>\r\n      <HomePageNav />\r\n      <div className=\"friends-page-container\">\r\n          {userData.length? \r\n          userData.map(user => {\r\n              return(\r\n                  <div key={user.is_following}>\r\n                      <FollowedUserCard username={user.user_name} userImage={user.user_image} userId={user.is_following} />\r\n                  </div>\r\n              )\r\n          })\r\n          : <NoDataCard data=\"users\" />}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FriendsPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\FollowedUserCard\\FollowedUserCard.Component.jsx",[],"D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\GetAnswerPage\\GetAnswerPage.jsx",["175"],"import HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component\";\r\nimport AnswerModel from \"../../Components/AnswerModel/AnswerModel.component\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./get-answer-page.style.css\";\r\nconst GetAnswerPage = () => {\r\n  const [answer, setAnswer] = useState({});\r\n  const questionId = useParams().answerid;\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\r\n        `http://localhost:4000/questions/getoneanswer/${questionId}`,\r\n        {\r\n          method: \"get\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n\r\n      const data = (await response.json()).payload;\r\n      setAnswer(data);\r\n        \r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Answer</title>\r\n      </Helmet>\r\n      <HomePageNav />\r\n      <div className=\"answer-page-container\">\r\n        <div className='one-answer'>\r\n        <AnswerModel\r\n          question={answer.question}\r\n          answeredDate={answer.answered_date}\r\n          answer={answer.answer}\r\n          isAnonymous={answer.is_anonymous}\r\n          likedBy={answer.liked_by}\r\n          numberOfLikes={answer.liked_by? answer.liked_by.length : 0}\r\n          questionId={answer.question_id}\r\n          image={answer.answer_image}\r\n          senderId={answer.sender_id}\r\n          userName= {answer.user_name}\r\n          userImage = {answer.user_image}\r\n          deleteHidden={true}\r\n          handleAnswerDelete={()=>null}\r\n        />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GetAnswerPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\WebSockets\\WebsocketConnection.js",["176"],"import { io } from \"socket.io-client\";\r\nimport toast from 'react-hot-toast';\r\nconst userId = JSON.parse(localStorage.getItem('userId'))\r\n\r\n\r\nconst notify = (message) => toast(message);\r\nconst socket = io('http://localhost:4000')\r\n\r\n\r\n// socket.on('disconnect', )\r\nsocket.on('like', (msg)=>{\r\n    notify(msg)\r\n})\r\nsocket.on('question', (msg)=>{\r\n    notify(msg)\r\n})\r\n\r\nsocket.on('answer', (msg)=>{\r\n    notify(msg)\r\n})\r\n\r\nexport default socket","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Pages\\NotificationPage\\NotificationPage.jsx",["177"],"import { useState, useEffect } from \"react\";\r\nimport HomePageNav from \"../../Components/HomePageNav/HomePageNav.Component\";\r\nimport Helmet from \"react-helmet\";\r\nimport \"./notification-page.style.css\";\r\nimport NotificationCard from \"../../Components/NotificationCard/NotificationCard.Component\";\r\n\r\nconst NotificationPage = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const accessToken = JSON.parse(localStorage.getItem(\"accessToken\"));\r\n  const refreshToken = JSON.parse(localStorage.getItem(\"refreshToken\"));\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const response = await fetch(\r\n        `http://localhost:4000/users/notifications`,\r\n        {\r\n          method: \"get\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"access-token\": `Bearer ${accessToken}`,\r\n            \"refresh-token\": refreshToken,\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      setNotifications(data.payload);\r\n    })();\r\n  }, []);\r\n\r\n  //Handle NotificationClick\r\n  const handleNotificationClick = async (id) => {\r\n    await fetch(`http://localhost:4000/users/marknotificationread/${id}`, {\r\n      method: \"put\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"access-token\": `Bearer ${accessToken}`,\r\n        \"refresh-token\": refreshToken,\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title> Notifications </title>\r\n      </Helmet>\r\n      <HomePageNav />\r\n      <div className=\"notificatons-page-contatiner\">\r\n        {notifications.map((notification) => {\r\n          return (\r\n            <div key={notification.notification_id}>\r\n              <NotificationCard\r\n                notificationType={notification.notification_type}\r\n                notificationSenderName={notification.user_name}\r\n                notificationSenderImage={notification.user_image}\r\n                notificationDate={notification.notification_date}\r\n                isQuestionAnonymous={notification.is_anonymous}\r\n                notificationSender={`/user/${notification.notification_sender}`}\r\n                questionId={notification.question_id}\r\n                notificationId={notification.notification_id}\r\n                handleNotificationClick={handleNotificationClick}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotificationPage;\r\n","D:\\Ahmed\\Web\\Projects\\Ask FM\\askclone-frontend\\src\\Components\\NotificationCard\\NotificationCard.Component.jsx",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":47,"column":13,"nodeType":"184","endLine":47,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":50,"column":13,"nodeType":"184","endLine":50,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":53,"column":13,"nodeType":"184","endLine":53,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":56,"column":13,"nodeType":"184","endLine":56,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":59,"column":13,"nodeType":"184","endLine":59,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":62,"column":13,"nodeType":"184","endLine":62,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":65,"column":13,"nodeType":"184","endLine":65,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":68,"column":13,"nodeType":"184","endLine":68,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":71,"column":13,"nodeType":"184","endLine":71,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":22,"column":9,"nodeType":"187","messageId":"188","endLine":22,"endColumn":21},{"ruleId":"178","replacedBy":"189"},{"ruleId":"180","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":31,"column":17,"nodeType":"193","messageId":"194","endLine":31,"endColumn":19},{"ruleId":"195","severity":1,"message":"196","line":36,"column":6,"nodeType":"197","endLine":36,"endColumn":8,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":111,"column":9,"nodeType":"184","endLine":111,"endColumn":74},{"ruleId":"191","severity":1,"message":"192","line":57,"column":23,"nodeType":"193","messageId":"194","endLine":57,"endColumn":25},{"ruleId":"195","severity":1,"message":"201","line":52,"column":6,"nodeType":"197","endLine":52,"endColumn":8,"suggestions":"202"},{"ruleId":"195","severity":1,"message":"203","line":75,"column":6,"nodeType":"197","endLine":75,"endColumn":8,"suggestions":"204"},{"ruleId":"195","severity":1,"message":"205","line":104,"column":29,"nodeType":"206","endLine":104,"endColumn":34},{"ruleId":"195","severity":1,"message":"207","line":56,"column":6,"nodeType":"197","endLine":56,"endColumn":8,"suggestions":"208"},{"ruleId":"199","severity":1,"message":"200","line":206,"column":13,"nodeType":"184","endLine":210,"endColumn":15},{"ruleId":"195","severity":1,"message":"209","line":30,"column":6,"nodeType":"197","endLine":30,"endColumn":8,"suggestions":"210"},{"ruleId":"195","severity":1,"message":"211","line":31,"column":6,"nodeType":"197","endLine":31,"endColumn":8,"suggestions":"212"},{"ruleId":"185","severity":1,"message":"213","line":3,"column":7,"nodeType":"187","messageId":"188","endLine":3,"endColumn":13},{"ruleId":"195","severity":1,"message":"209","line":28,"column":6,"nodeType":"197","endLine":28,"endColumn":8,"suggestions":"214"},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'handleLogout' is assigned a value but never used.","Identifier","unusedVar",["215"],["216"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'likedBy' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["217"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'Logout', 'accessToken', 'questionId', and 'refreshToken'. Either include them or remove the dependency array.",["218"],"React Hook useEffect has missing dependencies: 'accessToken', 'profileId', and 'refreshToken'. Either include them or remove the dependency array.",["219"],"Assignments to the 'isMounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has missing dependencies: 'Logout', 'accessToken', and 'refreshToken'. Either include them or remove the dependency array.",["220"],"React Hook useEffect has missing dependencies: 'accessToken' and 'refreshToken'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has missing dependencies: 'accessToken', 'questionId', and 'refreshToken'. Either include them or remove the dependency array.",["222"],"'userId' is assigned a value but never used.",["223"],"no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"232","fix":"236"},"Update the dependencies array to be: [likedBy, userId]",{"range":"237","text":"238"},"Update the dependencies array to be: [Logout, accessToken, questionId, refreshToken]",{"range":"239","text":"240"},"Update the dependencies array to be: [accessToken, profileId, refreshToken]",{"range":"241","text":"242"},"Update the dependencies array to be: [Logout, accessToken, refreshToken]",{"range":"243","text":"244"},"Update the dependencies array to be: [accessToken, refreshToken]",{"range":"245","text":"246"},"Update the dependencies array to be: [accessToken, questionId, refreshToken]",{"range":"247","text":"248"},{"range":"249","text":"246"},[1080,1082],"[likedBy, userId]",[1799,1801],"[Logout, accessToken, questionId, refreshToken]",[2826,2828],"[accessToken, profileId, refreshToken]",[1817,1819],"[Logout, accessToken, refreshToken]",[1108,1110],"[accessToken, refreshToken]",[1099,1101],"[accessToken, questionId, refreshToken]",[1016,1018]]